[{"path":"https://docs.ropensci.org/tiler/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/tiler/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Matthew Leonawicz Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"setup-windows-users","dir":"Articles","previous_headings":"","what":"Setup (Windows users)","title":"Introduction to tiler","text":"Python required well gdal library Python. easy recommended way Windows users Windows install OSGeo4W. bring required Python gdal library functionality along . OSGeo4W also commonly installed along QGIS. Windows, tiler_options() set package load osgeo4w = \"OSgeo4W.bat\". Make sure add path file system path variable. Otherwise found calling tile(). can set full path OSGeo4W.bat directly R session tiler_options(). However, recommended add directory (e.g. C:/OSGeo64 wherever OSGeo4W.bat located) system path never deal R. Linux Mac users additional setup long Python gdal Python installed available.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"context","dir":"Articles","previous_headings":"Geographic map tiles","what":"Context","title":"Introduction to tiler","text":"sake simple, expedient examples, map tiles generated use small zoom level ranges. also reason attempt displaying tiles . make examples informative, raster loaded plotted context, though necessary tiling process. Loading raster package needed print plot calls. example maps packaged tiler representative large, high resolution imagery benefits tiling. maps small order minimize package size ensure examples run quickly. tiling procedures demonstrated applied larger images. Lastly, consider power system attempting make ton tiles large images high resolutions. find system hang one number choke points. attempting make thousands tiles large, high resolution image system struggling, recommended (1) try making tiles one zoom level time, starting zero increasing monitoring system resources. (2) enough, find better system.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"basic-example","dir":"Articles","previous_headings":"Geographic map tiles","what":"Basic example","title":"Introduction to tiler","text":"Map tiles generated tile(). tile() takes input file name file source map tiles destination path save map tiles. required argument zoom, range zoom levels tiles. string form, e.g. 3:7. subsequent examples zoom levels 0-3 used. plot chunk ex1 Listing files tile_dir shows top level map tiles directories, 0-3 expected. printed subsequent examples since going change. Note examples rendered HTML capture parts log output result internal system call made tile(). run example see bit information console.","code":"library(tiler) library(raster) tile_dir <- file.path(tempdir(), \"tiles\") map <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 0.8333333, 0.8333333  (x, y) #> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax) #> crs        : +proj=longlat +datum=WGS84 +no_defs  #> source     : map_wgs84.tif  #> names      : map_wgs84  #> values     : -0.7205295, 5.545086  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete.  list.files(tile_dir) #> [1] \"0\"                   \"1\"                   \"2\"                   \"3\"                   \"doc.kml\"             \"tilemapresource.xml\""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"projected-maps","dir":"Articles","previous_headings":"Geographic map tiles","what":"Projected maps","title":"Introduction to tiler","text":"previous example used map geospatial coordinate reference system (CRS) projected. map ready view leaflet package example, tiles generated based . next example uses similar map projected. order generate map tiles can used leaflet standard CRS, map must reprojected first. map tiles generated . plot chunk ex2 tiles generated time , , ready leaflet. tile() reprojects raster layer internally. can seen log output printed console.","code":"map <- system.file(\"maps/map_albers.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : +proj=aea +lat_0=37.5 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs  #> source     : map_albers.tif  #> names      : map_albers  #> values     : -0.593978, 5.544724  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Reprojecting raster... #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"missing-crs","dir":"Articles","previous_headings":"Geographic map tiles","what":"Missing CRS","title":"Introduction to tiler","text":"CRS raster NA, two options. default, tile() fall back processing raster layer simple image file geospatial projection information (see next section simple CRS/non-geographic map tiles). tiles previous sets. plot chunk ex3 likely wanted. option force set known CRS missing file dropped whatever reason. Now reprojection can proceed expected tiles generated. note reprojection: Depending nature data raster, ... argument tile() allows pass method argument raster::projectRaster(). bilinear default bilinear interpolation, appropriate continuous data. can set ngb nearest neighbor, appropriate discrete categorical data. control needed reprojection, just prepare raster file first using tile(). tiler intended substitute wrap general geospatial processing tasks can easily done packages.","code":"map <- system.file(\"maps/map_albers_NA.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : NA  #> source     : map_albers_NA.tif  #> names      : map_albers_NA  #> values     : -0.593978, 5.544724  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Warning in .proj_check(file, crs, ...): Projection expected but is missing. Continuing as non-geographic image. #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete. crs <- \"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0\" tile(map, tile_dir, \"0-3\", crs) #> Reprojecting raster... #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"coloring-tiles","dir":"Articles","previous_headings":"Geographic map tiles","what":"Coloring tiles","title":"Introduction to tiler","text":"able change default color palette specify color breaks important. optional ... arguments tile() passed raster::RGB() provide control creation intermediary RGB raster. arguments RGB can usually ignored. useful ones col colNA data values color palette noData color, respectively. Coloring tiles differently original example simple following.","code":"map <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") pal <- colorRampPalette(c(\"darkblue\", \"lightblue\"))(20) nodata <- \"tomato\" tile(map, tile_dir, \"0-3\", col = pal, colNA = nodata) #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"rgb-and-rgba-rasters","dir":"Articles","previous_headings":"Geographic map tiles","what":"RGB and RGBA rasters","title":"Introduction to tiler","text":"Multi-band rasters supported long three four layers, case tile() assumes represent red, green, blue alpha channel, respectively. Internally, single-layer raster files colored converted three- four-band RGB/raster object prior tile generation. file already raster, step simply skipped. Optional arguments like data noData color, break points, etc., ignored since type raster contains color information. plot chunk ex6","code":"map <- system.file(\"maps/map_albers_rgb.tif\", package = \"tiler\") (r <- brick(map)) #> class      : RasterBrick  #> dimensions : 32, 71, 2272, 3  (nrow, ncol, ncell, nlayers) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : +proj=aea +lat_0=37.5 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs  #> source     : map_albers_rgb.tif  #> names      : map_albers_rgb_1, map_albers_rgb_2, map_albers_rgb_3  #> min values :                0,                0,                0  #> max values :              253,              255,              244 plot(r) tile(map, tile_dir, \"0-3\") #> Reprojecting raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"non-geographic-map-tiles","dir":"Articles","previous_headings":"","what":"Non-geographic map tiles","title":"Introduction to tiler","text":"Almost map tiles encounter geographic maps. geographic coordinate reference system (CRS). Software used display map tiles, Leaflet, similarly focused kinds map tiles. Everything geared towards dominant use case involving geospatial coordinate systems. However, edge cases non-geographic maps required. can maps outer space, game board maps, etc. base map used generate map tiles usually simple image like png, jpg bmp file. coordinate reference system simple Cartesian coordinate system based matrix pixels grid cells represent image. longitude latitude complex geospatial projection associated maps, said “simple CRS”. Simple necessarily mean easier work , however, geospatial tools, like Leaflet example, cater naturally non-geographic coordinate systems. Using map tiles Leaflet possible, takes bit non-standard effort.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"basic-example-1","dir":"Articles","previous_headings":"Non-geographic map tiles","what":"Basic example","title":"Introduction to tiler","text":"One example shown previously spatial map lacking critical spatial reference information processed simple image. example , intent. , map png file. previously saved plot Albers-projected US map used earlier projected geotiff example. can see color key legend. simple image, tiled. plot chunk ex7 tile() function automatically process simple image files differently. concept projection, coloring tiles irrelevant image file coloring already. Map tiles generated regular image files can used leaflet done properly. generated tiles simple CRS based pixel dimensions image file. use tiles leaflet example wanted overlay map markers, first georeference locations interest based matrix rows columns image. outside scope tiler. See Leaflet JS leaflet package documentation details using simple CRS/non-geographic tiles. Using png file recommended quality file size. jpg may yield lower quality result, large, high resolution bmp file may enormous file size compared png. jpg bmp optionally supported tiler. means installed imported tiler. assumed user provide png images. using jpg bmp packages jpeg bmp installed, respectively, tile() print message console notifying required package installations.","code":"map <- system.file(\"maps/map.png\", package = \"tiler\") plotRGB(brick(map)) #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent tile(map, tile_dir, \"0-3\") #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"additional-arguments","dir":"Articles","previous_headings":"","what":"Additional arguments","title":"Introduction to tiler","text":"arguments tile() include format, resume, viewer georef. format either xyz (default) tms. gdal2tiles generates TMS tiles, XYZ may familiar. Tile format applies geographic maps. simple image-based tiles XYZ format. setting format = \"tms\" may need something similar Leaflet JavaScript leaflet package R code tiles display proper orientation. resume = TRUE simply avoids overwriting tiles picking left without changing set zoom levels output path. viewer = TRUE creates preview.html adjacent tiles directory previewing tiles browser using Leaflet. georef = TRUE adds mouse click feedback Leaflet widget. Map markers matrix index coordinate labels appear mouse click assist georeferencing. georef applies non-geographic tiles. allows interactive georeferencing pixels image. Finally, ... can pass along additional arguments. See help documentation details.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"serving-map-tiles","dir":"Articles","previous_headings":"","what":"Serving map tiles","title":"Introduction to tiler","text":"Map tiles must served online much use. Serving map tiles purpose tiler using GitHub account easy way . Create GitHub repository, enable GitHub pages repository repository settings. repository exclusively serving map tiles, just set master branch source GitHub pages. committing pushing tiles GitHub, can access using URL form https://<account name>.github.io/maptiles/tiles/{z}/{x}/{y}.png store tiles folder named tiles repository named maptiles example. examples non-geographic tile sets hosted GitHub using Star Trek galaxy maps generated tiler used Leaflet maps.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"leaflet-examples-using-remotely-hosted-tiles","dir":"Articles","previous_headings":"Serving map tiles","what":"Leaflet examples using remotely hosted tiles","title":"Introduction to tiler","text":"following two examples use Leaflet display interactive maps. maps use remotely hosted map tiles created tiler. Geographic provider tiles based low resolution example map included tiler 48 contiguous US states. map tiles originally generated following code hosted . Non-geographic provider tiles based Star Trek fictional galaxy map. map tiles generated hosted , including source file st2.png. *Note: hosted tiles made tiler made XYZ-format tiles. now strictly makes TMS tiles. new tiles leaflet switch end url {y} {-y}.","code":"file <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") tile(file, \"tiles\", \"0-7\") library(leaflet) tiles <- \"https://leonawicz.github.io/tiles/us48lr/tiles/{z}/{x}/{y}.png\" leaflet(   options = leafletOptions(minZoom = 0, maxZoom = 7), width = \"100%\") %>%   addProviderTiles(\"Stamen.Toner\") %>%   addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3) tile(\"st2.png\", \"tiles\", \"0-7\") tiles <- \"https://leonawicz.github.io/tiles/st2/tiles/{z}/{x}/{y}.png\" leaflet(   options = leafletOptions(     crs = leafletCRS(\"L.CRS.Simple\"), minZoom = 0, maxZoom = 7, attributionControl = FALSE), width = \"100%\") %>%   addTiles(tiles) %>% setView(71, -60, 3)"},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"local-preview","dir":"Articles","previous_headings":"Serving map tiles","what":"Local preview","title":"Introduction to tiler","text":"default tile() also creates preview.html noted . can also created re-created directly using tile_viewer(). either case, long preview.html exists alongside tiles directory, can easily loaded browser view_tiles(). See help documentation details. tiles directory \"project/tiles\", creating preview.html directly can done follows. arguments shown just illustration. However tile preview document created, can viewed passing tiles directory view_tiles.","code":"tile_viewer(\"project/tiles\", \"3-7\") # geographic tiles tile_viewer(\"project/tiles\", \"3-7\", width = 1000, height = 1000) # non-geographic tiles view_tiles(\"project/tiles\")"},{"path":"https://docs.ropensci.org/tiler/articles/tiler-intro.html","id":"details","dir":"Articles","previous_headings":"Serving map tiles","what":"Details","title":"Introduction to tiler","text":"leaflet R code needed order use custom non-geographic tiles like requires setting leafletOptions(crs = leafletCRS(\"L.CRS.Simple\")) well calling addTiles(urlTemplate = url) url like example URL shown . Setting focus map can bit tricky non-geographic map tiles based arbitrary image file. may take trial error get sense custom coordinate system.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"setup-windows-users","dir":"Articles","previous_headings":"","what":"Setup (Windows users)","title":"Introduction to tiler","text":"Python required well gdal library Python. easy recommended way Windows users Windows install OSGeo4W. bring required Python gdal library functionality along . OSGeo4W also commonly installed along QGIS. Windows, tiler_options() set package load osgeo4w = \"OSgeo4W.bat\". Make sure add path file system path variable. Otherwise found calling tile(). can set full path OSGeo4W.bat directly R session tiler_options(). However, recommended add directory (e.g. C:/OSGeo64 wherever OSGeo4W.bat located) system path never deal R. Linux Mac users additional setup long Python gdal Python installed available.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"context","dir":"Articles","previous_headings":"Geographic map tiles","what":"Context","title":"Introduction to tiler","text":"sake simple, expedient examples, map tiles generated use small zoom level ranges. also reason attempt displaying tiles . make examples informative, raster loaded plotted context, though necessary tiling process. Loading raster package needed print plot calls. example maps packaged tiler representative large, high resolution imagery benefits tiling. maps small order minimize package size ensure examples run quickly. tiling procedures demonstrated applied larger images. Lastly, consider power system attempting make ton tiles large images high resolutions. find system hang one number choke points. attempting make thousands tiles large, high resolution image system struggling, recommended (1) try making tiles one zoom level time, starting zero increasing monitoring system resources. (2) enough, find better system.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"basic-example","dir":"Articles","previous_headings":"Geographic map tiles","what":"Basic example","title":"Introduction to tiler","text":"Map tiles generated tile(). tile() takes input file name file source map tiles destination path save map tiles. required argument zoom, range zoom levels tiles. string form, e.g. 3:7. subsequent examples zoom levels 0-3 used.  Listing files tile_dir shows top level map tiles directories, 0-3 expected. printed subsequent examples since going change. Note examples rendered HTML capture parts log output result internal system call made tile(). run example see bit information console.","code":"library(tiler) library(raster) tile_dir <- file.path(tempdir(), \"tiles\") map <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 0.8333333, 0.8333333  (x, y) #> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax) #> crs        : +proj=longlat +datum=WGS84 +no_defs  #> source     : map_wgs84.tif  #> names      : map_wgs84  #> values     : -0.7205295, 5.545086  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete.  list.files(tile_dir) #> character(0)"},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"projected-maps","dir":"Articles","previous_headings":"Geographic map tiles","what":"Projected maps","title":"Introduction to tiler","text":"previous example used map geospatial coordinate reference system (CRS) projected. map ready view leaflet package example, tiles generated based . next example uses similar map projected. order generate map tiles can used leaflet standard CRS, map must reprojected first. map tiles generated .  tiles generated time , , ready leaflet. tile() reprojects raster layer internally. can seen log output printed console.","code":"map <- system.file(\"maps/map_albers.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : +proj=aea +lat_0=37.5 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs  #> source     : map_albers.tif  #> names      : map_albers  #> values     : -0.593978, 5.544724  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Reprojecting raster... #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"missing-crs","dir":"Articles","previous_headings":"Geographic map tiles","what":"Missing CRS","title":"Introduction to tiler","text":"CRS raster NA, two options. default, tile() fall back processing raster layer simple image file geospatial projection information (see next section simple CRS/non-geographic map tiles). tiles previous sets.  likely wanted. option force set known CRS missing file dropped whatever reason. Now reprojection can proceed expected tiles generated. note reprojection: Depending nature data raster, ... argument tile() allows pass method argument raster::projectRaster(). bilinear default bilinear interpolation, appropriate continuous data. can set ngb nearest neighbor, appropriate discrete categorical data. control needed reprojection, just prepare raster file first using tile(). tiler intended substitute wrap general geospatial processing tasks can easily done packages.","code":"map <- system.file(\"maps/map_albers_NA.tif\", package = \"tiler\") (r <- raster(map)) #> class      : RasterLayer  #> dimensions : 32, 71, 2272  (nrow, ncol, ncell) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : NA  #> source     : map_albers_NA.tif  #> names      : map_albers_NA  #> values     : -0.593978, 5.544724  (min, max) plot(r) tile(map, tile_dir, \"0-3\") #> Warning in .proj_check(file, crs, tmpf = tf, ...): Projection expected but is #> missing. Continuing as non-geographic image. #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete. crs <- \"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0\" tile(map, tile_dir, \"0-3\", crs) #> Reprojecting raster... #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"coloring-tiles","dir":"Articles","previous_headings":"Geographic map tiles","what":"Coloring tiles","title":"Introduction to tiler","text":"able change default color palette specify color breaks important. optional ... arguments tile() passed raster::RGB() provide control creation intermediary RGB raster. arguments RGB can usually ignored. useful ones col colNA data values color palette noData color, respectively. Coloring tiles differently original example simple following.","code":"map <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") pal <- colorRampPalette(c(\"darkblue\", \"lightblue\"))(20) nodata <- \"tomato\" tile(map, tile_dir, \"0-3\", col = pal, colNA = nodata) #> Coloring raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"rgb-and-rgba-rasters","dir":"Articles","previous_headings":"Geographic map tiles","what":"RGB and RGBA rasters","title":"Introduction to tiler","text":"Multi-band rasters supported long three four layers, case tile() assumes represent red, green, blue alpha channel, respectively. Internally, single-layer raster files colored converted three- four-band RGB/raster object prior tile generation. file already raster, step simply skipped. Optional arguments like data noData color, break points, etc., ignored since type raster contains color information.","code":"map <- system.file(\"maps/map_albers_rgb.tif\", package = \"tiler\") (r <- brick(map)) #> class      : RasterBrick  #> dimensions : 32, 71, 2272, 3  (nrow, ncol, ncell, nlayers) #> resolution : 85011.74, 103363.8  (x, y) #> extent     : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax) #> crs        : +proj=aea +lat_0=37.5 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs  #> source     : map_albers_rgb.tif  #> names      : map_albers_rgb_1, map_albers_rgb_2, map_albers_rgb_3  #> min values :                0,                0,                0  #> max values :              253,              255,              244 plot(r) tile(map, tile_dir, \"0-3\") #> Reprojecting raster... #> Preparing for tiling... #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"non-geographic-map-tiles","dir":"Articles","previous_headings":"","what":"Non-geographic map tiles","title":"Introduction to tiler","text":"Almost map tiles encounter geographic maps. geographic coordinate reference system (CRS). Software used display map tiles, Leaflet, similarly focused kinds map tiles. Everything geared towards dominant use case involving geospatial coordinate systems. However, edge cases non-geographic maps required. can maps outer space, game board maps, etc. base map used generate map tiles usually simple image like png, jpg bmp file. coordinate reference system simple Cartesian coordinate system based matrix pixels grid cells represent image. longitude latitude complex geospatial projection associated maps, said “simple CRS”. Simple necessarily mean easier work , however, geospatial tools, like Leaflet example, cater naturally non-geographic coordinate systems. Using map tiles Leaflet possible, takes bit non-standard effort.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"basic-example-1","dir":"Articles","previous_headings":"Non-geographic map tiles","what":"Basic example","title":"Introduction to tiler","text":"One example shown previously spatial map lacking critical spatial reference information processed simple image. example , intent. , map png file. previously saved plot Albers-projected US map used earlier projected geotiff example. can see color key legend. simple image, tiled.  tile() function automatically process simple image files differently. concept projection, coloring tiles irrelevant image file coloring already. Map tiles generated regular image files can used leaflet done properly. generated tiles simple CRS based pixel dimensions image file. use tiles leaflet example wanted overlay map markers, first georeference locations interest based matrix rows columns image. outside scope tiler. See Leaflet JS leaflet package documentation details using simple CRS/non-geographic tiles. Using png file recommended quality file size. jpg may yield lower quality result, large, high resolution bmp file may enormous file size compared png. jpg bmp optionally supported tiler. means installed imported tiler. assumed user provide png images. using jpg bmp packages jpeg bmp installed, respectively, tile() print message console notifying required package installations.","code":"map <- system.file(\"maps/map.png\", package = \"tiler\") plotRGB(brick(map)) #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent  #> Warning: [rast] unknown extent tile(map, tile_dir, \"0-3\") #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete."},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"additional-arguments","dir":"Articles","previous_headings":"","what":"Additional arguments","title":"Introduction to tiler","text":"arguments tile() include format, resume, viewer georef. format either xyz (default) tms. gdal2tiles generates TMS tiles, XYZ may familiar. Tile format applies geographic maps. simple image-based tiles XYZ format. setting format = \"tms\" may need something similar Leaflet JavaScript leaflet package R code tiles display proper orientation. resume = TRUE simply avoids overwriting tiles picking left without changing set zoom levels output path. viewer = TRUE creates preview.html adjacent tiles directory previewing tiles browser using Leaflet. georef = TRUE adds mouse click feedback Leaflet widget. Map markers matrix index coordinate labels appear mouse click assist georeferencing. georef applies non-geographic tiles. allows interactive georeferencing pixels image. Finally, ... can pass along additional arguments. See help documentation details.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"serving-map-tiles","dir":"Articles","previous_headings":"","what":"Serving map tiles","title":"Introduction to tiler","text":"Map tiles must served online much use. Serving map tiles purpose tiler using GitHub account easy way . Create GitHub repository, enable GitHub pages repository repository settings. repository exclusively serving map tiles, just set master branch source GitHub pages. committing pushing tiles GitHub, can access using URL form https://<account name>.github.io/maptiles/tiles/{z}/{x}/{y}.png store tiles folder named tiles repository named maptiles example. examples non-geographic tile sets hosted GitHub using Star Trek galaxy maps generated tiler used Leaflet maps.","code":""},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"leaflet-examples-using-remotely-hosted-tiles","dir":"Articles","previous_headings":"Serving map tiles","what":"Leaflet examples using remotely hosted tiles","title":"Introduction to tiler","text":"following two examples use Leaflet display interactive maps. maps use remotely hosted map tiles created tiler. Geographic provider tiles based low resolution example map included tiler 48 contiguous US states. map tiles originally generated following code hosted . Non-geographic provider tiles based Star Trek fictional galaxy map. map tiles generated hosted , including source file st2.png. *Note: hosted tiles made tiler made XYZ-format tiles. now strictly makes TMS tiles. new tiles leaflet switch end url {y} {-y}.","code":"file <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") tile(file, \"tiles\", \"0-7\") library(leaflet) tiles <- \"https://leonawicz.github.io/tiles/us48lr/tiles/{z}/{x}/{y}.png\" leaflet(   options = leafletOptions(minZoom = 0, maxZoom = 7), width = \"100%\") %>%    addProviderTiles(\"Stamen.Toner\") %>%    addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3) tile(\"st2.png\", \"tiles\", \"0-7\") tiles <- \"https://leonawicz.github.io/tiles/st2/tiles/{z}/{x}/{y}.png\" leaflet(   options = leafletOptions(     crs = leafletCRS(\"L.CRS.Simple\"), minZoom = 0, maxZoom = 7, attributionControl = FALSE), width = \"100%\") %>%    addTiles(tiles) %>% setView(71, -60, 3)"},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"local-preview","dir":"Articles","previous_headings":"Serving map tiles","what":"Local preview","title":"Introduction to tiler","text":"default tile() also creates preview.html noted . can also created re-created directly using tile_viewer(). either case, long preview.html exists alongside tiles directory, can easily loaded browser view_tiles(). See help documentation details. tiles directory \"project/tiles\", creating preview.html directly can done follows. arguments shown just illustration. However tile preview document created, can viewed passing tiles directory view_tiles.","code":"tile_viewer(\"project/tiles\", \"3-7\") # geographic tiles tile_viewer(\"project/tiles\", \"3-7\", width = 1000, height = 1000) # non-geographic tiles view_tiles(\"project/tiles\")"},{"path":"https://docs.ropensci.org/tiler/articles/tiler.html","id":"details","dir":"Articles","previous_headings":"Serving map tiles","what":"Details","title":"Introduction to tiler","text":"leaflet R code needed order use custom non-geographic tiles like requires setting leafletOptions(crs = leafletCRS(\"L.CRS.Simple\")) well calling addTiles(urlTemplate = url) url like example URL shown . Setting focus map can bit tricky non-geographic map tiles based arbitrary image file. may take trial error get sense custom coordinate system.","code":""},{"path":"https://docs.ropensci.org/tiler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Leonawicz. Author, maintainer. Alex M Chubaty. Contributor.","code":""},{"path":"https://docs.ropensci.org/tiler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leonawicz M (2024). tiler: Create Geographic Non-Geographic Map Tiles. R package version 0.3.1, https://github.com/ropensci/tiler, https://docs.ropensci.org/tiler/.","code":"@Manual{,   title = {tiler: Create Geographic and Non-Geographic Map Tiles},   author = {Matthew Leonawicz},   year = {2024},   note = {R package version 0.3.1, https://github.com/ropensci/tiler},   url = {https://docs.ropensci.org/tiler/}, }"},{"path":[]},{"path":"https://docs.ropensci.org/tiler/index.html","id":"create-geographic-and-non-geographic-map-tiles","dir":"","previous_headings":"","what":"Create geographic and non-geographic map tiles","title":"Create Geographic and Non-Geographic Map Tiles","text":"tiler package provides tile generator function creating map tile sets use packages leaflet. addition generating map tiles based common raster layer source, also handles non-geographic edge case, producing map tiles arbitrary images. map tiles, non-geographic simple coordinate reference system, can also used leaflet applying simple CRS option. Map tiles can created input file following extensions: tif, grd nc spatial maps png, jpg bmp basic images.","code":""},{"path":"https://docs.ropensci.org/tiler/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Create Geographic and Non-Geographic Map Tiles","text":"package helps R users wish create geographic non-geographic map tiles easily seamlessly single line R code. intent package minimal heavy package dependencies. minimal extraneous general features functions tile generation. create tiles without code directly software, interact directly Python, make calls command line; allowing R user remain comfortably within familiar R environment. support creation map tiles raw images users wish create non-standard maps, may also followed georeferencing locations interest simplified coordinate reference system map image.","code":""},{"path":"https://docs.ropensci.org/tiler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Geographic and Non-Geographic Map Tiles","text":"Install tiler CRAN Install development version GitHub non-geographic tiles, using png file recommended quality file size. jpg may yield lower quality result, large, high resolution bmp file may enormous file size compared png. jpg bmp optionally supported tiler. means installed imported tiler. assumed user provide png images. using jpg bmp packages jpeg bmp installed, respectively, tile() print message console notifying required package installations.","code":"install.packages(\"tiler\") # install.packages(\"remotes\") remotes::install_github(\"ropensci/tiler\")"},{"path":"https://docs.ropensci.org/tiler/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System requirements","title":"Create Geographic and Non-Geographic Map Tiles","text":"package requires Python gdal library Python. Windows users recommended install OSGeo4W easy way obtain required gdal support Python Windows. See tiler_options() package vignette information. Please note tiler project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create map tiles — tile","title":"Create map tiles — tile","text":"Create geographic non-geographic map tiles file.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create map tiles — tile","text":"","code":"tile(   file,   tiles,   zoom,   crs = NULL,   resume = FALSE,   viewer = TRUE,   georef = TRUE,   ... )"},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create map tiles — tile","text":"file character, input file. tiles character, output directory generated tiles. zoom character, zoom levels. Example format: \"3-7\". See details. crs character, Proj4 string. Use force set CRS loaded raster object file cases CRS missing known, avoid defaulting non-geographic tiling. resume logical, generate missing tiles. viewer logical, also create preview.html adjacent tiles directory previewing tiles browser using Leaflet. georef logical, non-geographic tiles . viewer = TRUE, Leaflet widget preview.html add map markers coordinate labels mouse click assist georeferencing non-geographic tiles. ... additional arguments projected maps: reprojection method arguments raster::RGB(), e.g. col colNA. See details. additional arguments lng lat can also passed tile previewer. See tile_viewer() details.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create map tiles — tile","text":"nothing returned tiles written disk.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create map tiles — tile","text":"function supports geographic non-geographic tile generation. file simple image file png, tile() generates non-geographic, simple CRS tiles. Files can loaded raster package yield geographic tiles long file projection information. raster object's Proj4 string NA, falls back non-geographic tile generation warning thrown. Choice appropriate zoom levels non-geographic image files may depend size image. zoom value may partially ignored image files certain conditions. instance using example map.png , passing strictly zoom = n n less 3, still generates tiles zoom n 3.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"supported-file-types","dir":"Reference","previous_headings":"","what":"Supported file types","title":"Create map tiles — tile","text":"Supported simple CRS/non-geographic image file types include png, jpg bmp. projected map data, supported file types include three types readable raster package: grd, tif, nc (requires ncdf4). currently unsupported file types passed file throw error.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"raster-file-inputs","dir":"Reference","previous_headings":"","what":"Raster file inputs","title":"Create map tiles — tile","text":"map file loadable raster single-layer raster object, tile coloring applied. override default coloring data noData pixels, pass additional arguments col colNA .... Multi-layer raster objects rejected error message. exception three- four-band raster, assumed represent red, green, blue alpha channels, respectively. case, processing continue coloring arguments ignored unnecessary.  Prior tiling, geographically-projected raster layer reprojected EPSG:4326 projection. reprojection argument available ... method, can \"bilinear\" (default) \"ngb\". complete control reprojection required, done prior passing rasterized file tile function. reprojection performed tile(). file consists RGB RGBA bands, method ignored provided reprojection uses nearest neighbor.  recommended avoid using projected 4-band RGBA raster file. However, alpha channel appears ignored anyway. gdal2tiles gives internal warning. Instead, create RGBA raster file unprojected form pass gdal2tiles without issues. Three-band RGB raster files unaffected reprojection.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"tiles-and-leaflet","dir":"Reference","previous_headings":"","what":"Tiles and Leaflet","title":"Create map tiles — tile","text":"gdal2tiles generates TMS tiles. expecting XYZ, example using Leaflet, can change end URL hosted tiles {z}/{x}/{y}.png {z}/{x}/{-y}.png.  function supported two different versions gdal2tiles. standard version, generates geospatial tiles TMS format. version gdal2tiles} handles basic image files like matrix rows columns, using simple Cartesian coordinate system based pixel dimensions image file. See Leaflet JS library leaflet` package documentation working custom tiles Leaflet.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tiler/reference/tile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create map tiles — tile","text":"","code":"tmpfiles <- list.files(tempdir(), full.names = TRUE) # non-geographic/simple CRS x <- system.file(\"maps/map.png\", package = \"tiler\") tiles <- file.path(tempdir(), \"tiles\") tile(x, tiles, \"2-3\") #> Creating tiles. Please wait... #> Creating tile viewer... #> Complete.  if (FALSE) { # unprojected map x <- system.file(\"maps/map_wgs84.tif\", package = \"tiler\") tile(x, tiles, 0)  # projected map x <- system.file(\"maps/map_albers.tif\", package = \"tiler\") tile(x, tiles, 0) } # \\dontshow{ unlink(c(tiles, file.path(tempdir(), \"preview.html\")), recursive = TRUE,        force = TRUE) extrafiles <- setdiff(list.files(tempdir(), full.names = TRUE), tmpfiles) if(length(extrafiles)) unlink(extrafiles, recursive = TRUE, force = TRUE) # }"},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an HTML tile preview — tile_viewer","title":"Create an HTML tile preview — tile_viewer","text":"Create HTML file displays tile preview using Leaflet.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an HTML tile preview — tile_viewer","text":"","code":"tile_viewer(tiles, zoom, width = NULL, height = NULL, georef = TRUE, ...)"},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an HTML tile preview — tile_viewer","text":"tiles character, directory tiles stored. zoom character, zoom levels full range. Example format: \"3-7\". width NULL (default) geospatial map tiles. original image width pixels non-geographic, simple CRS tiles. height NULL (default) geospatial map tiles. original image height pixels non-geographic, simple CRS tiles. georef logical, non-geographic tiles . viewer = TRUE, Leaflet widget preview.html add map markers coordinate labels mouse click assist georeferencing non-geographic tiles. ... additional optional arguments include lng lat setting view longitude latitude. three arguments apply geographic tiles. Viewer centering (0, 0) default.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an HTML tile preview — tile_viewer","text":"nothing returned, file written disk.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an HTML tile preview — tile_viewer","text":"function creates file preview.html adjacent tiles base directory. loaded browser, file displays map tiles adjacent folder. example, tiles stored project/tiles, function creates project/preview.html. default, tile() creates file. reasons call tile_viewer() directly producing map tiles : (1) viewer = FALSE set call tile(), (2) tile() called multiple times, e.g., different batches zoom levels, thus recent call use full zoom range, (3) preview.html deleted reason. calling function directly, ensure min max zoom, original image pixel dimensions applicable, match generated tiles. arguments passed tile_viewer} automatically called within tile(), based source file provided tile()`.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tiler/reference/tile_viewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an HTML tile preview — tile_viewer","text":"","code":"tile_viewer(file.path(tempdir(), \"tiles\"), \"3-7\") # requires existing tiles"},{"path":"https://docs.ropensci.org/tiler/reference/tiler.html","id":null,"dir":"Reference","previous_headings":"","what":"tiler: Create map tiles from R — tiler","title":"tiler: Create map tiles from R — tiler","text":"tiler package creates geographic map tiles geospatial map files non-geographic map tiles simple image files.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tiler: Create map tiles from R — tiler","text":"package provides tile generator function creating map tile sets use packages leaflet. addition generating map tiles based common raster layer source, also handles non-geographic edge case, producing map tiles arbitrary images. map tiles, non-geographic simple coordinate reference system (CRS), can also used leaflet applying simple CRS option.  Map tiles can created input file following extensions: tif, grd nc spatial maps png, jpg bmp basic images.  package requires Python gdal library Python. Windows users recommended install OSGeo4W: https://trac.osgeo.org/osgeo4w/ easy way obtain required gdal support Python Windows.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options — tiler_options","title":"Options — tiler_options","text":"Options tiler package.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options — tiler_options","text":"","code":"tiler_options(...)"},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options — tiler_options","text":"... list options.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Options — tiler_options","text":"function prints set options called arguments. setting options, nothing returned.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Options — tiler_options","text":"Windows systems, system paths python.exe OSGeo4W.bat added system PATH variable, must provided user loading package. recommended add system path need specified every R session. long using OSGeo4W, can ignore Python path specification even need install system separately; OSGeo4W use built-version. recommended way GDAL available Python Windows install OSGeo4W. commonly installed along QGIS. default, tiler_options() set package load osgeo4w = \"OSGeo4W.bat\". expected user added path file system PATH variable Windows. example, installed C:/OSGeo4W64/OSGeo4W.bat, add C:/OSGeo4W64 PATH. want specify path R session using tiler_options(), provide full path including filename. See example. None applies systems. long system requirements, Python GDAL, installed, tile() generate tiles without getting setting tiler_options().","code":""},{"path":"https://docs.ropensci.org/tiler/reference/tiler_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options — tiler_options","text":"","code":"tiler_options() #> $python #>            python3  #> \"/usr/bin/python3\"  #>  #> $osgeo4w #> [1] \"\" #>  tiler_options(osgeo4w = \"C:/OSGeo4W64/OSGeo4W.bat\")"},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"View map tiles with Leaflet — view_tiles","title":"View map tiles with Leaflet — view_tiles","text":"View map tiles browser using leaflet.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View map tiles with Leaflet — view_tiles","text":"","code":"view_tiles(tiles)"},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View map tiles with Leaflet — view_tiles","text":"tiles character, directory tiles stored.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View map tiles with Leaflet — view_tiles","text":"nothing returned, default browser launched.","code":""},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View map tiles with Leaflet — view_tiles","text":"function opens preview.html web browser. file displays map tiles Leaflet widget. file created tile() called generate map tiles, unless viewer = FALSE. Alternatively, created (re-created) subsequent tile creation using tile_viewer().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tiler/reference/view_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View map tiles with Leaflet — view_tiles","text":"","code":"# launches browser; requires an existing tile set if (FALSE) view_tiles(file.path(tempdir(), \"tiles\"))"},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-031","dir":"Changelog","previous_headings":"","what":"tiler 0.3.1","title":"tiler 0.3.1","text":"CRAN release: 2023-09-10 Added required package alias documentation.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-030","dir":"Changelog","previous_headings":"","what":"tiler 0.3.0","title":"tiler 0.3.0","text":"CRAN release: 2023-08-08 Removed rgdal Imports added sf Suggests DESCRIPTION. Updated documentation tests. Fixed another race condition temp files running tile() parallel (#18; @achubaty).","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-026","dir":"Changelog","previous_headings":"","what":"tiler 0.2.6","title":"tiler 0.2.6","text":"Try automatically detect python path setting tiler option (#19; @achubaty). Fixed race condition temp files running tile() parallel (#18; @achubaty). Use GitHub Actions testing (#6; @achubaty).","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-025","dir":"Changelog","previous_headings":"","what":"tiler 0.2.5","title":"tiler 0.2.5","text":"CRAN release: 2021-02-20 Documentation updates.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-024","dir":"Changelog","previous_headings":"","what":"tiler 0.2.4","title":"tiler 0.2.4","text":"CRAN release: 2019-11-26 Precompiling vignette depending external data.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-023","dir":"Changelog","previous_headings":"","what":"tiler 0.2.3","title":"tiler 0.2.3","text":"CRAN release: 2019-11-22 Minor fixes CRAN release.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-022","dir":"Changelog","previous_headings":"","what":"tiler 0.2.2","title":"tiler 0.2.2","text":"Breaking change: longer using format argument. tiles TMS. Updated gdal2tiles version 2.4 release. Bug fix. Updated documentation.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-021","dir":"Changelog","previous_headings":"","what":"tiler 0.2.1","title":"tiler 0.2.1","text":"CRAN release: 2018-11-18 Improved simplified instructions expectations Windows use. Windows users must add OSGeo4W.bat path system path. Added leaflet examples remotely hosted tiles generated tiler vignette. Bug fix related system path OSGeo4W.bat ignored Windows.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-020","dir":"Changelog","previous_headings":"","what":"tiler 0.2.0","title":"tiler 0.2.0","text":"CRAN release: 2018-06-09 three gdal2tiles* scripts updated accept command line argument called R provides path temporary files, .e., tmp.*.vrt files created gdal2tiles* scripts. previously accumulating system temp folder. new temporary directory sub-directory inside tempdir(). Therefore, cleaned exiting R. Nevertheless, tile also force deletes subdirectory immediately internal system call one gdal2tiles* scripts returns, temporary sub-directory even exist full duration tile call. Added functions tile_viewer view_tiles supporting functions generating HTML Leaflet tile preview web page. Added arguments tile. tile now generates previewer default. Added unit tests. Updated vignette.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-016","dir":"Changelog","previous_headings":"","what":"tiler 0.1.6","title":"tiler 0.1.6","text":"CRAN release: 2018-06-06 Made minor formatting changes per CRAN request resubmission.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-015","dir":"Changelog","previous_headings":"","what":"tiler 0.1.5","title":"tiler 0.1.5","text":"Refactored tile, added arguments including resume format, changed argument names. Added default support XYZ format tiles addition TMS. brings another version gdal2tiles. Updated documentation. Added unit tests.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-010","dir":"Changelog","previous_headings":"","what":"tiler 0.1.0","title":"tiler 0.1.0","text":"Created tile function generating map tiles geographic non-geographic maps/images. Created readme basic example. Added initial introduction vignette. Added robust unit tests external examples spot testing edge cases.","code":""},{"path":"https://docs.ropensci.org/tiler/news/index.html","id":"tiler-0009000","dir":"Changelog","previous_headings":"","what":"tiler 0.0.0.9000","title":"tiler 0.0.0.9000","text":"Added initial package scaffolding.","code":""}]
